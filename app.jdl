application {
  config {
    baseName store
    applicationType gateway
    packageName com.mycompany.store
    serviceDiscoveryType eureka
    authenticationType jwt
    prodDatabaseType mysql
    cacheProvider hazelcast
    buildTool gradle
    clientFramework angularX
    useSass true
    languages [en, zh-cn, ta]
    websocket spring-websocket
    testFrameworks [protractor]
  }
  entities *
}

application {
  config {
    baseName invoice,
    applicationType microservice,
    packageName com.mycompany.store,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType mysql,
    buildTool gradle,
    serverPort 8081,
    languages [en, zh-cn, ta]
  }
  entities Invoice, Shipment
}

application {
  config {
    baseName notification,
    applicationType microservice,
    packageName com.mycompany.store,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    databaseType mongodb,
    cacheProvider no,
    enableHibernateCache false,
    buildTool gradle,
    serverPort 8082,
    languages [en, zh-cn, ta]
  }
  entities Notification
}

entity Customer {
  firstName String required,
  lastName String required,
  gender Gender required,
  email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/),
  phone String required,
  addressLine1 String required,
  addressLine2 String,
  city String required,
  country String required
}

entity OrderItem {
  quantity Integer required min(0),
  totalPrice BigDecimal required min(0),
  status OrderItemStatus required
}
/**
 * Product sold by the Online store
 */
entity Product {
  name String required,
  description String,
  price BigDecimal required min(0),
  productSize Size required,
  image ImageBlob
}
entity ProductCategory {
  name String required,
  description String
}
entity ProductOrder {
  placedDate Instant required,
  status OrderStatus required,
  code String required
}

enum Gender {
  MALE,
  FEMALE,
  OTHER
}

enum OrderItemStatus {
  AVAILABLE,
  OUT_OF_STOCK,
  BACK_ORDER
}
enum Size {
  S,
  M,
  L,
  XL,
  XXL
}
enum OrderStatus {
  COMPLETED,
  PENDING,
  CANCELLED
}

relationship OneToOne {
  Customer{user(login)} to User
}
relationship OneToMany {
  ProductOrder{orderItem} to OrderItem{order(code)},
  ProductCategory{product} to Product{productCategory(name)},
  Customer{order} to ProductOrder{customer(email)},
}
relationship ManyToOne {
  OrderItem{product} to Product
}

/* Entities for Invoice microservice */
entity Invoice {
    code String required
    date Instant required
    details String
    status InvoiceStatus required
    paymentMethod PaymentMethod required
    paymentDate Instant required
    paymentAmount BigDecimal required
}

enum InvoiceStatus {
    PAID, ISSUED, CANCELLED
}

entity Shipment {
    trackingCode String
    date Instant required
    details String
}

enum PaymentMethod {
    CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL
}

relationship OneToMany {
    Invoice{shipment} to Shipment{invoice(code) required}
}

service * with serviceClass
paginate Product, Customer, ProductOrder, Invoice, Shipment, OrderItem with pagination
microservice Invoice, Shipment with invoice

/* Entities for notification microservice */
entity Notification {
    date Instant required
    details String
    sentDate Instant required
    format NotificationType required
    userId Long required
    productId Long required
}

enum NotificationType {
    EMAIL, SMS, PARCEL
}

microservice Notification with notification
